type Query {
    hello: String!

    computer(id: ID!): Computer
    computers(input: AllComputerInput): [Computer!]!

    buildingLocations(buildingId: ID!): [Location!]!
    buildings: [Building!]!
    locations: [Location!]!

    users: [User!]!

    auth(username: String!, password: String!): AuthToken!
    verifyToken(token: String!): Unit!
}

type Mutation {
    updateComputer(id: ID!, input: UpdateComputerInput!): Unit!
    deleteComputer(ids: [ID!]!): Unit!
    createComputer(input: CreateComputerInput!): Unit!

    createUser(input: UserInput!): Unit!
    updateUser(id: ID!, input: UserInput!): Unit!
    deleteUser(id: ID!): Unit!

    createBuilding(input: BuildingInput!): Unit!
    updateBuilding(id: ID!, input: BuildingInput!): Unit!
    deleteBuilding(id: ID!): Unit!

    createLocation(input: LocationInput!): Unit!
    updateLocation(id: ID!, input: LocationInput!): Unit!
    deleteLocation(id: ID!): Unit!
}

enum Unit {
    UNIT
}

type AuthToken {
    token: String!
}


input UpdateComputerInput {
    name: String
    user: ID
    #    location: ID
    formFactor: FormFactor
    username: String
    serial: String
    type: ComputerType
    #    os: OSInput
    #    cpu: CPUInput
    ram: Int
}

input AllComputerInput {
    filter: FilterInput
    search: String
    sort: SortField
}

enum SortField {
    LABEL
    SERIAL
    CPU
    MEMORY
}

input FilterInput {
    serialNumber: FilterValue
    location: FilterValue
    formFactor: FormFactor
}

input CreateComputerInput {
    name: String!
    label: String!
    type: ComputerType!
    serial: String
    #    location: String
    os: OSInput
    cpu: CPUInput
    ram: Int
}

input OSInput {
    name: String
    architecture: String
}

input CPUInput {
    name: String
    clock: Int
    cores: Int
    threads: Int
}

input RAMInput {
    size: Int
}

enum FilterValue {
    SPECIFIED
    NOT_SPECIFIED
}

type Computer {
    id: ID!
    type: ComputerType!
    name: String!
    domain: String
    username: String
    serial: String
    ip: String
    comment: String
    label: String
    user: User
    location: String
    updated: String
    formFactor: FormFactor
    os: OS
    cpu: CPU
    ram: Int
    videocard: Videocard
}

type User {
    id: ID!
    firstName: String!
    lastName: String
    role: String
    computer: Computer
}

input UserInput {
    firstName: String!
    lastName: String
    role: String
}

type Location {
    id: ID!
    building: Building!
    cabinet: String!
    floor: Int!
    #    employees: [User]!
    description: String
}

type Building {
    id: ID!
    street: String!
    house: String!
}

input LocationInput {
    buildingId: ID!
    cabinet: String!
    floor: Int
    #    employees: [ID]
    description: String
}

input BuildingInput {
    street: String!
    house: String!
}

enum FormFactor {
    ATX
    mATX
}

enum ComputerType {
    DESKTOP
    LAPTOP
}

# Software types definition
type OS {
    name: String
    architecture: String
}

# Hardware types definition
type CPU {
    name: String
    clock: Int
    cores: Int
    threads: Int
}

type Videocard {
    name: String
    memory: Int
}

