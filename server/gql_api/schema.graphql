type Query {
    hello: String!
    getPC(name: String!): PC
    AllPC(input: AllPCInput): [PC!]!
}

type Mutation {
    updatePC(
        name: String!
        input: UpdatePCInput!
    ): PC!
    deletePC(names: [String!]!): Unit!
    createPC(input: CreatePCInput!): PC!
    createFromMSInfo(file: Upload!): PC!
}

enum Unit {
    UNIT
}

input UpdatePCInput {
    name: String
    type: ComputerType
    os: OSInput
    cpu: CPUInput
    ram: Int
}


input AllPCInput {
    filter: FilterInput
    search: String
    sort: SortField
}


enum SortField {
    LABEL
    SERIAL
    CPU
    MEMORY
}

input FilterInput {
    serialNumber: FilterValue
    location: FilterValue
    formFactor: FormFactor
}

input CreatePCInput {
    name: String!
    label: String!
    type: ComputerType!
    serial: String
    location: String
    os: OSInput
    cpu: CPUInput
    ram: Int
}

input OSInput {
    name: String
}


input CPUInput {
    name: String
}

input RAMInput {
    size: Int
}


enum FilterValue {
    SPECIFIED
    NOT_SPECIFIED
}

type Subscription {
    PC: PC!
}


type PC {
    type: ComputerType!
    name: String!
    domain: String
    username: String
    timezone: String
    serial: String
    ip: String
    comment: String
    label: String
    user: String
    location: String
    updated: String
    form_factor: FormFactor
    os: OS
    cpu: CPU
    ram: Int
    videocard: Videocard
}

enum FormFactor {
    ATX
    mATX
}

enum ComputerType {
    DESKTOP
    LAPTOP
}

# Software types definition
type OS {
    name: String
    architecture: String
}

# Hardware types definition
type CPU {
    name: String
    clock: Int
    cores: Int
    threads: Int
}

type Videocard {
    name: String
    memory: Int
}

type Filter {
    name: String,
    id: String,
    options: [String!]!,
}

scalar Upload